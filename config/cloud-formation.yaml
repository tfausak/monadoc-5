AWSTemplateFormatVersion: 2010-09-09
Description:
  https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html

# Be sure to update the domain's name servers to point to the hosted zone's
# name servers, otherwise DNS resolution won't work. This step is manual
# because the domain isn't managed by CloudFormation.

# Certificates require manual validation. After creating a certificate with
# CloudFormation, you must go to the certificate manager in the AWS console and
# hit the "Create record in Route 53" button.

# If you change the instance type, you will probably also want to change the
# CPU and memory of the task definition. All of the instance's CPU is available
# but some of the memory is taken. For example a t3a.micro instance has 2 vCPUs
# and 1 GiB of memory, which turns into 2048 CPU units and 961 memory units. Be
# sure to leave enough capacity for double instances on deploys!

Parameters:

  AmiId:
    Type: String
    Default: ami-00c7c1cf5bdc913ed
    Description:
      The ECS optimized Amazon Machine Image (AMI) ID to use for EC2 instances
      in the auto scaling group. The default value was picked on 2020-06-26.
      # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/retrieve-ecs-optimized_AMI.html

  ClientId:
    Type: String
    Default: 658122d4ef8c24039953
    Description:
      The client ID for the GitHub OAuth application. You can get this at
      <https://github.com/settings/developers>.

  ClientSecret:
    Type: String
    Description:
      The client secret for the GitHub OAuth application. See the "ClientId"
      parameter for details.

  DiscordUrl:
    Type: String
    Description:
      The URL to the Discord webhook for reporting exceptions. This is the full
      URL, not just the ID and token.

  DomainName:
    Type: String
    Default: monadoc.com
    Description:
      The root (apex) domain name. You can include the final period after the
      TLD here, but you don't need to.

  PortNumber:
    Type: Number
    Default: 4444
    Description:
      The port number to bind inside the container. It's unlikely that you'll
      need to change this.

  TagName:
    Type: String
    Description:
      The Docker image tag to deploy. Usually this is the HEAD of the default
      branch, but it can be any tag that exists for the image in the registry.

Resources:

  ApexCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS

  ApexDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          TargetOriginId: !Ref DomainName
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2
        Origins:
          - CustomOriginConfig:
              OriginProtocolPolicy: http-only
            DomainName: !Select
              - 1
              - !Split
                - //
                - !GetAtt Bucket.WebsiteURL
            Id: !Ref DomainName
        ViewerCertificate:
          AcmCertificateArn: !Ref ApexCertificate
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

  ApexRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt ApexDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref HostedZone
      Name: !Ref DomainName
      Type: A

  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: !Ref DomainName
      WebsiteConfiguration:
        RedirectAllRequestsTo:
          HostName: !Sub www.${DomainName}
          Protocol: https

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-cluster

  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref DomainName

  Instance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref AmiId
      InstanceType: t3a.small
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: !Ref Subnet1
      UserData:
        Fn::Base64: !Sub |
          #! /usr/bin/env sh
          set -o errexit -o xtrace
          echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config
          mkfs.xfs /dev/sdz || true
          mkdir /ebs
          mount /dev/sdz /ebs
          /opt/aws/bin/cfn-signal \
            --exit-code $? \
            --region ${AWS::Region} \
            --resource AutoScalingGroup \
            --stack ${AWS::StackName}
      Volumes:
        - Device: /dev/sdz
          VolumeId: !Ref Volume

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      RoleName: !Sub ${AWS::StackName}-instance-role

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}-instance-profile
      Roles:
        - !Ref InstanceRole

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref OriginCertificate
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-load-balancer
      SecurityGroups:
        - !Ref SecurityGroup
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-log-group
      RetentionInDays: 30

  OriginCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub origin.${DomainName}
      ValidationMethod: DNS

  OriginRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
      HostedZoneId: !Ref HostedZone
      Name: !Sub origin.${DomainName}
      Type: A

  Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows everything
      GroupName: !Sub ${AWS::StackName}-security-group
      SecurityGroupEgress:
        CidrIp: 0.0.0.0/0
        FromPort: -1
        IpProtocol: -1
        ToPort: -1
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: -1
        IpProtocol: -1
        ToPort: -1
      VpcId: !Ref Vpc

  Service:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: 0
      LoadBalancers:
        - ContainerName: !Sub ${AWS::StackName}-container-definition
          ContainerPort: !Ref PortNumber
          TargetGroupArn: !Ref TargetGroup
      ServiceName: !Sub ${AWS::StackName}-service
      TaskDefinition: !Ref TaskDefinition

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref Vpc

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet1

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet2

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /api/ping
      Name: !Sub ${AWS::StackName}-target-group
      Port: !Ref PortNumber
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref Vpc

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Command:
            - monadoc
            - !Sub --client-id=${ClientId}
            - !Sub --client-secret=${ClientSecret}
            - --database=/ebs/monadoc.sqlite3
            - !Sub --discord-url=${DiscordUrl}
            - --host=*
            - !Sub --port=${PortNumber}
            - !Sub --url=https://www.${DomainName}
          Essential: true
          Image: !Sub taylorfausak/monadoc:${TagName}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref TagName
          MountPoints:
            - ContainerPath: /ebs
              SourceVolume: !Sub ${AWS::StackName}-volume
          Name: !Sub ${AWS::StackName}-container-definition
          PortMappings:
            - ContainerPort: !Ref PortNumber
      Cpu: 1024
      ExecutionRoleArn: !Ref TaskRole
      Family: !Sub ${AWS::StackName}-task-definition
      Memory: 980
      NetworkMode: bridge
      Volumes:
        - Host:
            SourcePath: /ebs
          Name: !Sub ${AWS::StackName}-volume

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      RoleName: !Sub ${AWS::StackName}-task-role

  Volume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      Encrypted: true
      Size: 64

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true

  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  WwwCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub www.${DomainName}
      ValidationMethod: DNS

  WwwDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub www.${DomainName}
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: false
          ForwardedValues:
            Cookies:
              Forward: all
            Headers:
              - Accept-Encoding
            QueryString: true
          TargetOriginId: !Sub origin.${DomainName}
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2
        Origins:
          - CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
            DomainName: !Sub origin.${DomainName}
            Id: !Sub origin.${DomainName}
        ViewerCertificate:
          AcmCertificateArn: !Ref WwwCertificate
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

  WwwRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt WwwDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref HostedZone
      Name: !Sub www.${DomainName}
      Type: A
