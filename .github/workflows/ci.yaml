name: CI

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:

  build:
    name: build (${{ matrix.os }})
    strategy:
      matrix:
        os: [ ubuntu-18.04, macos-10.15, windows-2019 ]
        ghc: [ '8.10' ]
        cabal: [ '3.2' ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - id: setup-haskell
        uses: actions/setup-haskell@v1.1
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}
      - run: cabal freeze
      - uses: actions/cache@v2
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store  }}
          key: ${{ matrix.os }}-${{ matrix.ghc }}-${{ matrix.cabal }}-${{ hashFiles('cabal.project.freeze') }}
          restore-keys: |
            ${{ matrix.os }}-${{ matrix.ghc }}-${{ matrix.cabal }}-
            ${{ matrix.os }}-${{ matrix.ghc }}-
      - run: runghc src/script/set-commit-hash.hs src/lib/Monadoc/Data/Commit.hs ${{ github.sha }}
      - run: cabal test --test-show-details direct
      - run: cabal install --install-method copy --installdir docker exe:monadoc
      - uses: actions/upload-artifact@v2
        with:
          path: docker/monadoc*
          name: monadoc-${{ matrix.os }}-${{ github.sha }}

  push:
    needs: build
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: monadoc-ubuntu-18.04-${{ github.sha }}
          path: docker
      - run: chmod +x docker/monadoc
      - run: cp --recursive data docker
      - uses: docker/build-push-action@v1
        with:
          username: taylorfausak
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: taylorfausak/monadoc
          tags: ${{ github.sha }}
          path: docker

  deploy:
    if: github.ref == 'refs/heads/main'
    needs: push
    runs-on: ubuntu-18.04
    steps:
      - run: >
          curl
          --header 'Content-Type: application/json'
          --data '{ "content": "Deploying commit `${{ github.sha }}` ..." }'
          '${{ secrets.DISCORD_URL }}'
      - uses: actions/checkout@v2
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: monadoc
          template: config/cloud-formation.yaml
          parameter-overrides: ClientSecret=${{ secrets.CLIENT_SECRET }},DiscordUrl=${{ secrets.DISCORD_URL }},TagName=${{ github.sha }}
          no-fail-on-empty-changeset: '1'
          capabilities: CAPABILITY_NAMED_IAM
      - if: success()
        run: >
          curl
          --header 'Content-Type: application/json'
          --data '{ "content": "Successfully deployed `${{ github.sha }}`." }'
          '${{ secrets.DISCORD_URL }}'
      - if: failure()
        run: >
          curl
          --header 'Content-Type: application/json'
          --data '{ "content": "Failed to deploy `${{ github.sha }}`!" }'
          '${{ secrets.DISCORD_URL }}'
      - if: cancelled()
        run: >
          curl
          --header 'Content-Type: application/json'
          --data '{ "content": "Cancelled deployment of `${{ github.sha }}`." }'
          '${{ secrets.DISCORD_URL }}'
