# Be sure to update the domain's name servers to point to the hosted zone's
# name servers, otherwise DNS resolution won't work. This step is manual
# because the domain isn't managed by CloudFormation.

Parameters:

  AvailabilityZone1:
    Type: AWS::EC2::AvailabilityZone::Name
    Description:
      One of the availability zones. Be sure to keep this in sync with the
      region and the other availability zone.
    Default: us-east-1a

  AvailabilityZone2:
    Type: AWS::EC2::AvailabilityZone::Name
    Description:
      One of the availability zones. Be sure to keep this in sync with the
      region and the other availability zone.
    Default: us-east-1b

  Commit:
    Type: String
    Description:
      The Git commit SHA to deploy. Usually this is the HEAD of the default
      branch, but it can be anything with a tagged image in the registry.

  Domain:
    Type: String
    Description:
      The root (apex) domain name. You can include the final period after the
      TLD here, but you don't need to.
    Default: monadoc.com

  Package:
    Type: String
    Description:
      The name of the package to get from the GitHub repository's Docker
      registry.
    Default: monadoc

  Port:
    Type: Number
    Description:
      The port number to bind inside the container. It's unlikely that you'll
      need to change this.
    Default: 4444

  Region:
    Type: String
    Description:
      The region to use for various AWS operations. Make sure this matches
      whatever you've configured the AWS CLI to use. Be sure to keep this in
      sync with the availability zones.
    Default: us-east-1

  Repo:
    Type: String
    Description:
      The project name, which is used to name associated resources. This is
      just the repository without the organization or username. Note that
      changing this will probably force replacement on most resources.
    Default: monadoc

  Token:
    Type: String
    Description:
      A GitHub Personal Access Token used to authenticate with their Docker
      registry (docker.pkg.github.com) and pull container images.
    NoEcho: true

  User:
    Type: String
    Description:
      The GitHub username to use for various tasks. This is mostly used to
      avoid repeating yourself.
    Default: tfausak

Resources:

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-secretsmanager-secret.html
  DockerCredentials:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${Repo}-docker-credentials
      Description:
        Credentials used to authenticate with GitHub's Docker registry.
      SecretString: !Sub >
        { "username": "${User}"
        , "password": "${Token}"
        }

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${Repo}-log-group
      RetentionInDays: 30

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
  Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${Repo}-role-${AWS::Region}
      Description: !Sub
        Role used to launch ECS tasks for the ${Repo} project.
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
            Effect: Allow
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/private-auth.html#private-auth-iam
        - PolicyName: !Sub ${Repo}-get-secret-value
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - kms:Decrypt
                Resource:
                  - !Ref DockerCredentials
                  - !Sub arn:aws:kms:${Region}:${AWS::AccountId}:key/key_id

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-taskdefinition.html
  Task:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${Repo}-task-definition
      Cpu: 256
      Memory: 512
      RequiresCompatibilities: [ FARGATE ]
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref Role
      ContainerDefinitions:
        - Name: !Sub ${Repo}-container
          Essential: true
          Image: !Sub docker.pkg.github.com/${User}/${Repo}/${Package}:${Commit}
          RepositoryCredentials:
            CredentialsParameter: !Ref DockerCredentials
          Command:
            - monadoc
            - --host=*
            - !Sub --port=${Port}
          PortMappings:
            - ContainerPort: !Ref Port
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: !Ref Commit

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-cluster.html
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${Repo}-cluster

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc.html
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet.html
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.10.1.0/24
      AvailabilityZone: !Ref AvailabilityZone1
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: 10.10.2.0/24
      AvailabilityZone: !Ref AvailabilityZone2

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupName: !Sub ${Repo}-security-group
      GroupDescription:
        Allows everything.
      SecurityGroupEgress:
        CidrIp: 0.0.0.0/0
        IpProtocol: -1
        FromPort: -1
        ToPort: -1
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        IpProtocol: -1
        FromPort: -1
        ToPort: -1

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-internetgateway.html
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-vpc-gateway-attachment.html
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route-table.html
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-route.html
  Route:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-subnet-route-table-assoc.html
  RouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet1
  RouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet2

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ecs-service.html
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${Repo}-service
      Cluster: !Ref Cluster
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref Task
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref Subnet1
            - !Ref Subnet2
          SecurityGroups:
            - !Ref SecurityGroup
      LoadBalancers:
        - ContainerName: !Sub ${Repo}-container
          ContainerPort: !Ref Port
          TargetGroupArn: !Ref TargetGroup
      PlatformVersion: 1.4.0

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Repo}-load-balancer
      SecurityGroups:
        - !Ref SecurityGroup
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-targetgroup.html
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /health-check
      Name: !Sub ${Repo}-target-group
      Port: !Ref Port
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref Vpc

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-route53-hostedzone.html
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref Domain

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-route53-recordset.html
  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
      HostedZoneId: !Ref HostedZone
      Name: !Sub www.${Domain}
      Type: A

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-efs-filesystem.html
  FileSystem:
    Type: AWS::EFS::FileSystem
